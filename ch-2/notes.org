#+TITLE: Ch2 Notes

* Exercises

*** Exercise 2.1: Modify the eight-queen program so that it stops after printing the first solution.
- Solution: add /os.exit()/ as a line directly after /printsolution(a)/ in the provided example

*** Exercise 2.2: An alternative implimentation for the eight-queen problem would be to generate all possible permutations of 1 to 8 and, for each permutation, to check whether it is valid. Change the program to use this approach. How does the performance of the new program compare with the old one? (Hint: compare the total number of permutations with the number of times that the original program calls the function /isplaceok/.)
- So, after banging my head against the wall for a while I finally googled some documentation, and the example solutions I've found have, at a glance, all used coroutines, something WAY beyond my current knowledge. My assumption is that a program essentially "brute forcing" all possible solutions rather than an algorithmic approach would run far slower, as it also has to *generate* a bunch of incorrect answers. I plan to return to this once I have more knowledge and experience.
